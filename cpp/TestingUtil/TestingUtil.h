/* ***************************************************************
\\ File Name:  TestingUtil.h
// Created By: Nick G. Toth
\\ E-Mail:     ntoth@pdx.edu
// Date:       August 13th, 2017
\\
// Overview: This file contains declarations for several general
\\ unit testing tools. Include TestingUtil.h for usage.
// See TestingUtil.cpp for more information.
\\
// ***************************************************************/


#ifndef STD_UTIL_H
#define STD_UTIL_H

#include <iostream>
#include <cstdlib>
#include <cstring>
#include <string>
#include <fstream>
#include <chrono>
#include <ctime>


namespace tu
{
    // *********************** |
    // MISC Testing Functions  |
    // *********************** V

    // Load in menu options from an external file, generate printable cli menu.
    std::unique_ptr<std::string[]> generateMenu(std::string filename);

    // General controller for the menu generated by generateMenu().
    int menuController(std::unique_ptr<std::string[]> const & menu);

    // Read in a boolean decision from the user.
    bool confirmChoice( char fst_choice = 'Y',
                        char snd_choice = 'N' );

    // Wait for user to press enter.
    void continueMenu(void);

    // Read in a number in [0,1,2..]
    int readNaturalNum(std::string data_type);

    // Read in a number in [..-2,-1,0,1,2..]
    int readInteger(std::string data_type);

    // Read in a string.
    void readValue( std::string data_loc,
                    std::string data_type,
                    int max_len );


    // **************** |
    // Function timers  |
    // **************** V


    // Calculates the execution time in nanoseconds
    // of a function that takes no arguments. Stores
    // the time in the exe_time parameter. Returns
    // the return value of the function being timed.
    template <typename T>
    T executionTime( double & exe_time,
                     T (*func_to_time) (void) )
    {
        double start_time = std::chrono::high_resolution_clock::now().time_since_epoch().count();
        T return_val = (*func_to_time);
        double end_time = std::chrono::high_resolution_clock::now().time_since_epoch().count();

        exe_time = end_time - start_time;
        return return_val;
    }


    // Calculates the execution time in nanoseconds
    // of a function that takes one argument. Stores
    // the time in the exe_time parameter. Returns
    // the return value of the function being timed.
    template <typename T, typename A1>
    T executionTime( double & exe_time,
                     T (*func_to_time) (A1),
                     A1 param_one )
    {
        double start_time = std::chrono::high_resolution_clock::now().time_since_epoch().count();
        T return_val = (*func_to_time) (param_one);
        double end_time = std::chrono::high_resolution_clock::now().time_since_epoch().count();

        exe_time = end_time - start_time;
        return return_val;
    }

    // Calculates the execution time in nanoseconds
    // of a function that takes two arguments. Stores
    // the time in the exe_time parameter. Returns
    // the return value of the function being timed.
    template <typename T, typename A1, typename A2 >
    T executionTime( double & exe_time,
                     T (*func_to_time) (A1, A2),
                     A1 param_one,
                     A2 param_two )
    {
        double start_time = std::chrono::high_resolution_clock::now().time_since_epoch().count();
        T return_val = (*func_to_time) (param_one, param_two);
        double end_time = std::chrono::high_resolution_clock::now().time_since_epoch().count();

        exe_time = end_time - start_time;
        return return_val;
    }

    // Calculates the execution time in nanoseconds of
    // a function that takes three arguments. Stores
    // the time in the exe_time parameter. Returns
    // the return value of the function being timed.
    template <typename T, typename A1, typename A2, typename A3>
    T executionTime( double & exe_time,
                     T (*func_to_time) (A1, A2, A3),
                     A1 param_one,
                     A2 param_two,
                     A3 param_three )
    {
        double start_time = std::chrono::high_resolution_clock::now().time_since_epoch().count();
        T return_val = (*func_to_time) (param_one, param_two, param_three);
        double end_time = std::chrono::high_resolution_clock::now().time_since_epoch().count();

        exe_time = end_time - start_time;
        return return_val;
    }
};
#endif // STD_UTIL_H